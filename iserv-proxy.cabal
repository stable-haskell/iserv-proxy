Name: iserv-proxy
Version: 9.3
Copyright: XXX
License: BSD3
-- XXX License-File: LICENSE
Author: XXX
Maintainer: XXX
Synopsis: iserv allows GHC to delegate Template Haskell computations
Description:
  GHC can be provided with a path to the iserv binary with
  @-pgmi=/path/to/iserv-bin@, and will in combination with
  @-fexternal-interpreter@, compile Template Haskell though the
  @iserv-bin@ delegate. This is very similar to how ghcjs has been
  compiling Template Haskell, by spawning a separate delegate (so
  called runner on the javascript vm) and evaluating the splices
  there.
  .
  iserv can also be used in combination with cross compilation. For
  this, the @iserv-proxy@ needs to be built on the host, targeting the
  host (as it is running on the host). @cabal install -flibrary
  -fproxy@ will yield the proxy.
  .
  Using the cabal for the target @arch-platform-target-cabal install
  -flibrary@ will build the required library that contains the FFI
  @startInterpreter@ function, which needs to be invoked on the target
  (e.g. in an iOS application) to start the remote iserv interpreter
  .
  calling the GHC cross compiler with @-fexternal-interpreter
  -pgmi=$HOME/.cabal/bin/iserv-proxy -opti\<ip address\> -opti\<port\>@
  will cause it to compile Template Haskell via the remote at \<ip address\>.
  .
  Thus to get cross compilation with Template Haskell follow the
  following recipe:
  .
  * compile the iserv library for your target
  .
      > iserv $ arch-platform-target-cabal install -flibrary
  .
  * setup an application for your target that calls the
    @startInterpreter@ function. This could be either the included
    @iserv-proxy-interpreter@ executable or, if necessary, an application in
    your target's FFI-capable language:
  .
      >  void startInterpreter(
      >    false /* verbose */, 5000 /* port */,
      >    "/path/to/storagelocation/on/target");
  .
  * build the @iserv-proxy@
  .
      > iserv $ cabal install -flibrary -fproxy
  .
  * Start your iserv interpreter app on your target running on, for instance,
    @10.0.0.1:5000@. Compile your sources with @-fexternal-interpreter@ and the
    proxy
  .
      > project $ arch-platform-target-ghc ModuleContainingTH.hs \
      >             -fexternal-interpreter \
      >             -pgmi=$HOME/.cabal/bin/iserv-proxy \
      >             -opti10.0.0.1 -opti5000
  .
  Should something not work as expected, provide @-opti-v@ for verbose
  logging of the @iserv-proxy@.

Category: Development
build-type: Simple
cabal-version: >=1.10
-- these aren't really headers. They are more like includable files.
extra-source-files: cbits/symbols.aarch64-musl.h

Library
   Default-Language: Haskell2010
   Hs-Source-Dirs: src
   Exposed-Modules:
     IServ.Remote.Message,
     IServ.Remote.Interpreter
   Build-Depends: array      >= 0.5 && < 0.6,
                  base       >= 4   && < 5,
                  binary     >= 0.7 && < 0.9,
                  bytestring >= 0.10 && < 0.13,
                  containers >= 0.5 && < 0.8,
                  deepseq    >= 1.4 && < 1.6,
                  directory  >= 1.3 && < 1.4,
                  network    >= 2.6,
                  filepath   >= 1.4 && < 1.6,
                  ghci
  if impl(ghc < 9.8)
    Build-Depends: libiserv

Executable iserv-proxy
   Default-Language: Haskell2010
   Main-Is: Main.hs
   Build-Depends: base       >= 4   && < 5,
                  binary     >= 0.7 && < 0.9,
                  bytestring >= 0.10 && < 0.13,
                  directory  >= 1.3 && < 1.4,
                  network    >= 2.6,
                  filepath   >= 1.4 && < 1.6,
                  ghci,
                  iserv-proxy
  if impl(ghc < 9.8)
    Build-Depends: libiserv

Executable iserv-proxy-interpreter
   Default-Language: Haskell2010
   Main-Is: Interpreter.hs
   -- We need to pass -fkeep-cafs to ensure that the interpreter retains CAFs
   -- Iserv and GHC do something similar.
   ghc-options: -fkeep-cafs
   -- no idea how to check for musl :-/
   if os(linux) && arch(aarch64)
     c-sources: cbits/symbols.aarch64-musl.c

   Build-Depends: base       >= 4   && < 5,
                  iserv-proxy

